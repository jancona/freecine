/*
 * ScanProgressDlg.java
 *
 * Created on 24. maaliskuuta 2008, 8:51
 */

package fi.kaimio.moviescan.ui;

import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import fi.kaimio.sane.Sane;
import fi.kaimio.sane.SaneDevice;
import fi.kaimio.sane.SaneDeviceDescriptor;
import fi.kaimio.sane.SaneException;
import java.awt.Graphics;
import java.awt.image.RenderedImage;
import java.awt.image.RenderedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 Dialog for controlling the scanning
 */
public class ScanProgressDlg extends javax.swing.JDialog {
    
    /** Creates new form ScanProgressDlg */
    public ScanProgressDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        fillScanners();
    }

    /**
     Fill the combo box that lists available scanners
     */
    private void fillScanners() {
        List<SaneDeviceDescriptor> scanners = getScanners();
        for ( SaneDeviceDescriptor d : scanners ) {
            scannerCombo.addItem( d );
        }
    }
    
    /** This method is called from within the constructor to
     initialize the form.
     WARNING: Do NOT modify this code. The content of this method is
     always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        messageLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        scannerCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        scannerInfoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(fi.kaimio.moviescan.ui.Moviescan.class).getContext().getResourceMap(ScanProgressDlg.class);
        messageLabel.setFont(resourceMap.getFont("messageLabel.font")); // NOI18N
        messageLabel.setText(resourceMap.getString("messageLabel.text")); // NOI18N
        messageLabel.setName("messageLabel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(fi.kaimio.moviescan.ui.Moviescan.class).getContext().getActionMap(ScanProgressDlg.class, this);
        jButton1.setAction(actionMap.get("startScan")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        scannerCombo.setName("scannerCombo"); // NOI18N
        scannerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scannerComboActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        scannerInfoLabel.setText(resourceMap.getString("scannerInfoLabel.text")); // NOI18N
        scannerInfoLabel.setName("scannerInfoLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scannerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scannerInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(scannerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scannerInfoLabel))
                .addGap(43, 43, 43)
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     Called when another scanner is selected. Show information about the selected
     scanner.
     @param evt
     */
    private void scannerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scannerComboActionPerformed
        SaneDeviceDescriptor d = (SaneDeviceDescriptor) scannerCombo.getSelectedItem();
        if ( d != null ) {
            scannerInfoLabel.setText( d.vendor + " " + d.model + " " + d.type );
        } else {
            scannerInfoLabel.setText( "" );
        }
    }//GEN-LAST:event_scannerComboActionPerformed
    
    ScanTask scanTask = null;
    
    RenderedImage previewImg = null;
    
    @Override
    public void paint( Graphics g ) {
        super.paint( g );
        // Paint the preview iamge
        if ( previewImg != null ) {
            // ((Graphics2D)g).drawRenderedImage(previewImg, AffineTransform.getTranslateInstance( 10.0, 20.0) );
        }
    }

    /**
     Called to set the progress bar
     */
    void scanProgress() {
        progressBar.setValue( scanTask.getProgress() );
    }
    
    /**
     Start a background task that does the scanning & image analysis
     @return
     */
    @Action
    public Task startScan() {
        SaneDevice dev = null;
        try {
            SaneDeviceDescriptor d = (SaneDeviceDescriptor) scannerCombo.getSelectedItem();
            dev = new SaneDevice( d.name );
        } catch ( SaneException e ) {

        }
        scanTask = new ScanTask( dev, null );
        scanTask.addPropertyChangeListener( new PropertyChangeListener() {

            public void propertyChange( PropertyChangeEvent evt ) {
                if ( evt.getPropertyName().equals( "progress" ) ) {
                    scanProgress( ); 
                } else if ( evt.getPropertyName().equals( "message" ) ) {
                    messageLabel.setText( scanTask.getMessage() );
                } 
            }
        });

        return scanTask;
    }

    /**
     Helper function to get all available scanners
     @return
     */
    static List<SaneDeviceDescriptor> getScanners() {
        Sane sane = Sane.INSTANCE;
        IntByReference version = new IntByReference();
        int ret = sane.sane_init( version, null );
        System.out.println( "Sane init returner " + ret );
        System.out.println( "Sane version = " + version.getValue() );

        List<SaneDeviceDescriptor> scanners = new ArrayList<SaneDeviceDescriptor>();
        // Find the right scanner
        PointerByReference dList = new PointerByReference();
        Pointer devPtr = null;
        SaneDevice dev = null;
        ret = sane.sane_get_devices( dList, true );
        int offset = 0;

        while ( (devPtr = dList.getValue().getPointer( offset )) != null ) {
            offset += Pointer.SIZE;
            SaneDeviceDescriptor d = new SaneDeviceDescriptor( devPtr );
            scanners.add( d );
        }

        return scanners;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JComboBox scannerCombo;
    private javax.swing.JLabel scannerInfoLabel;
    // End of variables declaration//GEN-END:variables
    
}
