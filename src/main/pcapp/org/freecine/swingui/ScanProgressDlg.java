/*
Copyright (C) 2008 Harri Kaimio
 
This file is part of Freecine
 
Freecine is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the Free 
Software Foundation; either version 3 of the License, or (at your option) 
any later version.
 
This program is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with 
this program; if not, see <http://www.gnu.org/licenses>.
 
Additional permission under GNU GPL version 3 section 7
 
If you modify this Program, or any covered work, by linking or combining it 
with Java Advanced Imaging (or a modified version of that library), containing 
parts covered by the terms of Java Distribution License, or leJOS, containing 
parts covered by the terms of Mozilla Public License, the licensors of this 
Program grant you additional permission to convey the resulting work. 
 */

package org.freecine.swingui;

import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import org.freecine.filmscan.FilmMover;
import org.freecine.filmscan.Project;
import org.freecine.sane.Sane;
import org.freecine.sane.SaneDevice;
import org.freecine.sane.SaneDeviceDescriptor;
import org.freecine.sane.SaneException;
import java.awt.Graphics;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskEvent;
import org.jdesktop.application.TaskListener;

/**
 Dialog for controlling the scanning
 */
public class ScanProgressDlg extends javax.swing.JDialog {
    
    Project prj; 
    
    /**
     Create a new ScanProgressDlg
     @param parent Paren window for the dialog
     @param prj Project into which the scanned frames are added
     @param modal Is this a model dialog?
     */
    public ScanProgressDlg(java.awt.Frame parent, Project prj, boolean modal) {
        super(parent, modal);
        this.prj = prj;
        initComponents();
        fillScanners();
        findFilmMover();
    }

    /**
     Fill the combo box that lists available scanners
     */
    private void fillScanners() {
        List<SaneDeviceDescriptor> scanners = getScanners();
        for ( SaneDeviceDescriptor d : scanners ) {
            scannerCombo.addItem( d );
        }
    }
    
    private void findFilmMover() {
        FilmMoverFinderTask t = new FilmMoverFinderTask(Application.getInstance() );
        t.addTaskListener( new TaskListener.Adapter<FilmMover,Void>() {

            @Override
            public void succeeded( TaskEvent<FilmMover> ev ) {
                setFilmMover(ev.getValue() );
            }

        });
        
        t.addPropertyChangeListener( new PropertyChangeListener() {

            public void propertyChange( PropertyChangeEvent ev ) {
                if ( "message".equals( ev.getPropertyName() ) ) {
                    messageLabel.setText(ev.getNewValue().toString());
                }
            }
        } );
        t.execute();
    }
    
    /** This method is called from within the constructor to
     initialize the form.
     WARNING: Do NOT modify this code. The content of this method is
     always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        messageLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        scannerCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        scannerInfoLabel = new javax.swing.JLabel();
        stopScanBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.freecine.swingui.Moviescan.class).getContext().getResourceMap(ScanProgressDlg.class);
        messageLabel.setFont(resourceMap.getFont("messageLabel.font")); // NOI18N
        messageLabel.setText(resourceMap.getString("messageLabel.text")); // NOI18N
        messageLabel.setName("messageLabel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.freecine.swingui.Moviescan.class).getContext().getActionMap(ScanProgressDlg.class, this);
        jButton1.setAction(actionMap.get("startScan")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        scannerCombo.setName("scannerCombo"); // NOI18N
        scannerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scannerComboActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        scannerInfoLabel.setText(resourceMap.getString("scannerInfoLabel.text")); // NOI18N
        scannerInfoLabel.setName("scannerInfoLabel"); // NOI18N

        stopScanBtn.setAction(actionMap.get("stopScan")); // NOI18N
        stopScanBtn.setName("stopScanBtn"); // NOI18N

        closeBtn.setAction(actionMap.get("closeDlg")); // NOI18N
        closeBtn.setName("closeBtn"); // NOI18N

        jButton2.setAction(actionMap.get("adjustScanArea")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scannerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scannerInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                            .addComponent(jButton2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopScanBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(scannerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scannerInfoLabel))
                        .addGap(43, 43, 43)
                        .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(closeBtn)
                            .addComponent(stopScanBtn)
                            .addComponent(jButton1)))
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     Called when another scanner is selected. Show information about the selected
     scanner.
     @param evt
     */
    private void scannerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scannerComboActionPerformed
        SaneDeviceDescriptor d = (SaneDeviceDescriptor) scannerCombo.getSelectedItem();
        if ( d != null ) {
            scannerInfoLabel.setText( d.vendor + " " + d.model + " " + d.type );
        } else {
            scannerInfoLabel.setText( "" );
        }
    }//GEN-LAST:event_scannerComboActionPerformed
    
    ScanTask scanTask = null;
    

    
    @Override
    public void paint( Graphics g ) {
        super.paint( g );
    }

    /**
     Called to set the progress bar
     */
    void scanProgress() {
        progressBar.setValue( scanTask.getProgress() );
    }
    
    /**
    Start a background task that does the scanning & image analysis
    @return
     */
    @Action(block = Task.BlockingScope.ACTION, enabledProperty = "readyForScanning")
    public Task startScan() {
        SaneDevice dev = null;
        try {
            SaneDeviceDescriptor d = (SaneDeviceDescriptor) scannerCombo.getSelectedItem();
            dev = new SaneDevice( d.name );
        } catch ( SaneException e ) {

        }
        scanTask = new ScanTask( dev, filmMover, scanArea, prj );
        scanTask.addPropertyChangeListener( new PropertyChangeListener() {

            public void propertyChange( PropertyChangeEvent evt ) {
                if ( evt.getPropertyName().equals( "progress" ) ) {
                    scanProgress( ); 
                } else if ( evt.getPropertyName().equals( "message" ) ) {
                    messageLabel.setText( scanTask.getMessage() );
                } 
            }
        });
        
        scanTask.addTaskListener( new TaskListener.Adapter<Void, Void>() {
            @Override
            public void finished( TaskEvent<Void> arg0 ) {
                setScanOngoing( false );
            }
            
        });

        setScanOngoing( true );
        return scanTask;
    }

    private static class StartScanTask extends org.jdesktop.application.Task<Object, Void> {
        StartScanTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to StartScanTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }

    /**
     Helper function to get all available scanners
     @return
     */
    static List<SaneDeviceDescriptor> getScanners() {
        Sane sane = Sane.INSTANCE;
        IntByReference version = new IntByReference();
        int ret = sane.sane_init( version, null );
        System.out.println( "Sane init returner " + ret );
        System.out.println( "Sane version = " + version.getValue() );

        List<SaneDeviceDescriptor> scanners = new ArrayList<SaneDeviceDescriptor>();
        // Find the right scanner
        PointerByReference dList = new PointerByReference();
        Pointer devPtr = null;
        SaneDevice dev = null;
        if ( sane.sane_get_devices( dList, true ) == 0 ) {
            int offset = 0;

            while ( (devPtr = dList.getValue().getPointer( offset )) != null ) {
                offset += Pointer.SIZE;
                SaneDeviceDescriptor d = new SaneDeviceDescriptor( devPtr );
                scanners.add( d );
            }
        }
        return scanners;
    }

    @Action(enabledProperty = "scanOngoing")
    public void stopScan() {
        scanTask.cancel( false );
    }
    
    private boolean scanOngoing = false;
    public boolean isScanOngoing() {
        return scanOngoing;
    }

    public void setScanOngoing(boolean b) {
        boolean old = isScanOngoing();
        boolean wasReady = isReadyForScanning();
        this.scanOngoing = b;
        firePropertyChange("scanOngoing", old, isScanOngoing());
        firePropertyChange("okToClose", !old, !isScanOngoing());
        firePropertyChange("readyForScanning", wasReady, isReadyForScanning() );
    }
    
    public boolean isReadyForScanning() {
        return isFilmMoverReady() && !isScanOngoing();
    }
    
    public boolean isOkToClose() {
        return !isScanOngoing();
    }

    FilmMover filmMover = null;
    /**
     property to indicate if film filmMover is ready
     */
    public boolean isFilmMoverReady() {
        // return filmMover != null;
        return true;
    }
    
    public void setFilmMover( FilmMover mover ) {
        FilmMover old = this.filmMover;
        boolean oldExists = isFilmMoverReady();
        boolean wasReady = isReadyForScanning();
        this.filmMover = mover;
        firePropertyChange("filmMover", old, getFilmMover() );
        firePropertyChange("filmMoverReady", oldExists, isFilmMoverReady() );
        firePropertyChange("readyForScanning", wasReady, isReadyForScanning() );
    }

    public FilmMover getFilmMover() {
        return filmMover;
    }
    
    @Action( enabledProperty="okToClose" )
    public void closeDlg() {
        setVisible( false );
    }

    Rectangle2D scanArea = null;
    
    /**
     Show the scan preview dialog
     */
    @Action ( block=Task.BlockingScope.ACTION )
    public void adjustScanArea() {
        SaneDeviceDescriptor d = (SaneDeviceDescriptor) scannerCombo.getSelectedItem();
        try {
            SaneDevice dev = new SaneDevice( d.name );
            ScanPreviewDlg dlg = new ScanPreviewDlg( this, false );
            dlg.setScanner( dev );
            dlg.setScanArea( new Rectangle2D.Double( 30.0, 48.0, 160.0, 7.0 ) );
            dlg.addPropertyChangeListener("scanArea", new PropertyChangeListener() {

                public void propertyChange( PropertyChangeEvent ev ) {
                    scanArea = (Rectangle2D) ev.getNewValue();
                }
            });
            dlg.setVisible( true );
            
        } catch ( SaneException e ) {
            return;
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JComboBox scannerCombo;
    private javax.swing.JLabel scannerInfoLabel;
    private javax.swing.JButton stopScanBtn;
    // End of variables declaration//GEN-END:variables
    
}
