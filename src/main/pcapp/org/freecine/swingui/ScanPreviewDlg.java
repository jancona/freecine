/*
Copyright (C) 2008 Harri Kaimio
 
This file is part of Freecine
 
Freecine is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the Free 
Software Foundation; either version 3 of the License, or (at your option) 
any later version.
 
This program is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with 
this program; if not, see <http://www.gnu.org/licenses>.
 
Additional permission under GNU GPL version 3 section 7
 
If you modify this Program, or any covered work, by linking or combining it 
with Java Advanced Imaging (or a modified version of that library), containing 
parts covered by the terms of Java Distribution License, or leJOS, containing 
parts covered by the terms of Mozilla Public License, the licensors of this 
Program grant you additional permission to convey the resulting work. 
 */

package org.freecine.swingui;

import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import org.freecine.sane.SaneDevice;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskEvent;
import org.jdesktop.application.TaskListener;

/**
 Dialog for showing the preview scan and selecting area for real scanning.
 @author  harri
 */
public class ScanPreviewDlg extends javax.swing.JDialog {
    
    static private Logger log = Logger.getLogger( ScanPreviewDlg.class.getName() );
    
    /** Creates new form ScanPreviewDlg */
    public ScanPreviewDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public ScanPreviewDlg( JDialog parent, boolean modal ) {
        super( parent, modal );
        initComponents();
    }
    /**
     The scanner used
     */
    private SaneDevice scanner;
    
    /**
     Get the scanner which scan area is being adjusted
     @return
     */
    public SaneDevice getScanner() {
        return scanner;
    }

    /**
     Set the scanner used in this dialog.
     @param s
     */
    public void setScanner( SaneDevice s ) {
        SaneDevice oldScanner = scanner;
        scanner = s;
        firePropertyChange( "scanner", oldScanner, s );
    }
        
    /**
     Scan area
     */
    Rectangle2D scanArea;
    
    /**
     Get the currently set scan area.
     @return Rectangle describing currently selected scan area, in device 
     coordinate units. The units are the same used by Sane back end for this type
     of scanner (e.g. millimeters, not pixels)
     */
    public Rectangle2D getScanArea() {
        return scanArea;
    }
    
    /**
     Set the scan area displayed in the dialog.
     @param newArea New area, in device coordinate units (see getScanArea() for
     more information.
     */
    public void setScanArea( Rectangle2D newArea ) {
        Rectangle2D oldVal = scanArea;
        scanArea = newArea;
        ((PreviewPane)previewPane).setSelection( newArea );
        firePropertyChange( "scanArea", oldVal, newArea );
    }
    

    /** This method is called from within the constructor to
     initialize the form.
     WARNING: Do NOT modify this code. The content of this method is
     always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previewPane = new PreviewPane();
        startPreviewScanBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        previewPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        previewPane.setName("previewPane"); // NOI18N

        javax.swing.GroupLayout previewPaneLayout = new javax.swing.GroupLayout(previewPane);
        previewPane.setLayout(previewPaneLayout);
        previewPaneLayout.setHorizontalGroup(
            previewPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 377, Short.MAX_VALUE)
        );
        previewPaneLayout.setVerticalGroup(
            previewPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.freecine.swingui.Moviescan.class).getContext().getActionMap(ScanPreviewDlg.class, this);
        startPreviewScanBtn.setAction(actionMap.get("scanPreviewImage")); // NOI18N
        startPreviewScanBtn.setName("startPreviewScanBtn"); // NOI18N

        okBtn.setAction(actionMap.get("ok")); // NOI18N
        okBtn.setName("okBtn"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previewPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startPreviewScanBtn)
                    .addComponent(okBtn))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startPreviewScanBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okBtn))
                    .addComponent(previewPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScanPreviewDlg dialog = new ScanPreviewDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /**
     Create a background task for scanning the preview image
     @return A {@link ScanPreviewTask}
     */
    @Action
    public Task scanPreviewImage() {
        
        final ScanPreviewTask t = new ScanPreviewTask( 
                Application.getInstance( Moviescan.class ), scanner );
        
        t.addTaskListener( new TaskListener.Adapter<BufferedImage, BufferedImage>() {
            @Override
            public void succeeded( TaskEvent<BufferedImage> ev ) {
                try {
                    ((PreviewPane) previewPane).setPreviewImage( t.get() );
                    
                    ((PreviewPane) previewPane).setPreviewArea( t.getPreviewArea() );
                } catch ( InterruptedException ex ) {
                    log.log( Level.SEVERE, null, ex );
                } catch ( ExecutionException ex ) {
                    log.log( Level.SEVERE, null, ex );
                }
            }

        });
        return t;
    }

    /**
     The OK button was pressed
     */
    @Action
    public void ok() {
        Rectangle2D oldArea = scanArea;
        scanArea = ((PreviewPane)previewPane).getSelection();
        setVisible( false );
        firePropertyChange( "scanArea", oldArea, scanArea );
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton okBtn;
    private javax.swing.JPanel previewPane;
    private javax.swing.JButton startPreviewScanBtn;
    // End of variables declaration//GEN-END:variables
    
}
